{
    "swagger": "2.0",
    "info": {
      "version": "2.3.0",
      "title": "Nodejs Application API",
      "description": "Users&Products",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "host": "localhost:8000",
    "basePath": "/",
    "tags": [
      {
        "name": "Users",
        "description": "API for users in the system"
      },
      {
        "name": "Products",
        "description": "API for products in the system"
      },
      {
        "name": "Categories",
        "description": "API for Categories in the system"
      }
    ],
    "schemes": [
      "http",
      "https"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "paths": {
      "/prod/addproduct": {
        "parameters": [
          {
            "name": "image",
            "in": "formData",
            "required": true,
            "description": "image to add ",
            "type": "file",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          {
            "name": "prix",
            "in": "formData",
            "required": true,
            "type":"string",
            "description": "prix of product to add",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
      "post": {
          "summary": "Add product ",
          "tags": [
            "Products"
          ],
          "responses": {
            "400": {
              "description": "Prod added",
              "schema": {
                "$ref": "#/definitions/Product"
              }
            }

          }
        }
    },
      "/users": {
        "post": {
          "tags": [
            "Users"
          ],
          "description": "Create new user in system",
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "description": "User that we want to create",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "New user is created",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get all users in system",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/Users"
              }
            }
          }
        }
      },
      "/users/showusers": {
          "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get all users in db",
          "responses": {
            "500": {
              "description": "OK",
              "schema": {
                "$ref": "#/AllUsers/get_users"
              }
            }
          }
        }
      },
      "/users/deleteOneUser/{id}": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of user that we want to find",
            "type": "string"
          }
        ],
      "get": {
          "summary": "Delete One user ",
          "tags": [
            "Users"
          ],
          "responses": {
            "200": {
              "description": "User is deleted",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
    },

"/users/updateOneUser/{id}": {

  "produces": [
    "application/json"
  ],
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to Update",
          "type": "string"
        },
        {
          "name": "user",
          "in": "body",
          "description": "User that we want to create",
          "schema": {
            "$ref": "#/definitions/User"
          }
        }
      ],
    "put": {
        "summary": "Update one user ",
        "tags": [
          "Users"
        ],
        "responses": {
          "401": {
            "description": "User is Updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "User is not updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }

        }
      }
  },
      "/users/{userId}": {
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "ID of user that we want to find",
            "type": "string"
          }
        ],
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Get user with given ID",
          "responses": {
            "200": {
              "description": "User is found",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "delete": {
          "summary": "Delete user with given ID",
          "tags": [
            "Users"
          ],
          "responses": {
            "200": {
              "description": "User is deleted",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "put": {
          "summary": "Update user with give ID",
          "tags": [
            "Users"
          ],
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "description": "User with new values of properties",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User is updated",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "Order": {
        "required": [
        "name"
         ],
        "properties": {
          "name": {
          "type": "string"
          }
        }
      },
      "User": {
        "required": [
          "email",
          "nom",
          "prenom",
          "email",
          "password"
         
        ],
        "properties": {
         
          "email": {
            "type": "string",
            "uniqueItems": true
          },
          "nom": {
            "type": "string"
          },
          "prenom": {
            "type": "string"
          },
          "phone": {
            "type": "number"
          },
          "password": {
            "type": "string"
          },
          "Order": [{
            "type": "array",
            "ref":"#/definition/Order"
          }]
        }
      }, 

       "Product": {
        "required": [
          "prix"
        ],
        "properties": {
            "prix": {
            "type": "string"
          },
            "image": {
            "type": "string"
          }
        }
      },

      "Users": {
        "type": "array",
        "$ref": "#/definitions/User"
      }
    }
  }